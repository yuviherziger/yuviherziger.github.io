{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to tomodo","text":"<p>Welcome to <code>tomodo</code> - a Toolbox for MongoDB on Docker. Use it to create and manage Docker-based MongoDB community deployments: standalone instances, replica sets, sharded clusters, and local Atlas deployments.</p> <p></p> <p>Ready to install it? Header over to the installation guide.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#110","title":"1.1.0","text":"<ul> <li>It's now possible to use ephemeral deployments for usage in unit tests and environments that don't require   any persistence using the <code>--ephemeral</code> flag.</li> </ul>"},{"location":"disclaimer/","title":"Disclaimer","text":"<p>This open-source software project and its associated artifacts are not supported by MongoDB, Inc. under any of their commercial support subscriptions or otherwise.  Any usage of tomodo is at your own risk. Bug reports, feature requests, and questions can be posted in the issues section of the tomodo repository.</p>"},{"location":"examples/","title":"Usage Examples","text":""},{"location":"examples/#create-a-sharded-cluster","title":"Create a sharded cluster","text":"<pre><code># Overriding some of the default values\ntomodo provision sharded \\\n  --replicas 3 \\\n  --shards 4 \\\n  --mongos 3 \\\n  --config-servers 3\n</code></pre>"},{"location":"examples/#create-an-atlas-deployment","title":"Create an Atlas deployment","text":"<pre><code>tomodo provision atlas \\\n  --username admin \\\n  --password supersecret\n</code></pre>"},{"location":"examples/#create-an-ops-manager-deployment-and-add-servers","title":"Create an Ops Manager deployment and add servers","text":"<p>Run the following command:</p> <pre><code>tomodo ops-manager create --name my-mms\n</code></pre> <p>Log into your Ops Manager deployment via http://localhost:80/account/register, create your first Ops Manager user, and then go ahead and create an Agent API key (see instructions).</p> <p>Keep your project ID and agent API key, then create as many empty deployment servers as you like. For example:</p> <pre><code>tomodo ops-manager add-server my-mms --count 3 \\\n  --project-id &lt;PROJECT_ID&gt; \\\n  --api-key &lt;AGENT_API_KEY&gt;\n</code></pre> <p>Take note of the ports displayed in the logs of the command above.  These are the ports you can use in your deployment.</p>"},{"location":"gh-actions/","title":"Tomodo GitHub Action","text":"<p>You can use tomodo in your GitHub actions to run MongoDB instances for your workflows and pipelines. One popular usage of containerized databases is running unit tests in GitHub Actions.</p> <p>Here is an example of how you can run an Atlas container in your GitHub Actions with tomodo; it uses a simplified Node.js example to illustrate how the Atlas container's connection string is injected into an environment variable:</p> <pre><code>name: Run unit test\non: [ push ]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Git checkout\n        uses: actions/checkout@v4\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: 20\n\n      - name: Start a MongoDB Atlas container\n        id: tomodo\n        uses: yuvalherziger/tomodo-github-action@v1\n        with:\n          type: \"atlas\"\n          username: \"unittest\"\n          password: \"supersecret\"\n\n      - run: npm install\n\n      # Use the tomodo step's output to grab the connection string - and you're done!\n      - name: Run tests\n        run: npm test\n        env:\n          MONGODB_URI: ${{ steps.tomodo.outputs.connection-string }}\n</code></pre> <p>You can check out the example in this repository to see how your unit tests can run against a local MongoDB Atlas instance.</p>"},{"location":"gh-actions/#action-input","title":"Action Input","text":"<p>The action accepts the following parameters:</p> Name Description Type Default <code>name</code> The deployment's name String auto-generated <code>instance-type</code> The MongoDB instance type One of: <code>atlas</code>, <code>standalone</code>, <code>replica-set</code>, <code>sharded</code> <code>atlas</code> <code>username</code> Optional authentication username String - <code>password</code> Optional authentication password String - <code>port</code> MongoDB port (in a cluster, this is the first incrementing port) Integer; Min: <code>0</code>, Max: <code>65535</code> <code>27017</code> <code>image-tag</code> The MongoDB image tag (determines the MongoDB version) String <code>latest</code> <code>replicas</code> The number of replica set nodes to provision One of: <code>1</code>, <code>3</code>, <code>5</code> ,<code>7</code> <code>3</code> <code>shards</code> The number of shards to provision (sharded cluster) Integer (positive) <code>2</code> <code>config-servers</code> The number of config server replica set nodes (sharded cluster) One of: <code>1</code>, <code>3</code>, <code>5</code> ,<code>7</code> <code>1</code> <code>mongos</code> The number of mongos routers (sharded cluster) Integer (positive) <code>1</code> <code>network-name</code> The Docker network to provision the deployment in string <code>mongo-network</code>"},{"location":"installation/","title":"Installation","text":"<p><code>tomodo</code> can be installed using the following methods:</p> <ul> <li>Homebrew (macOS)</li> <li>pip</li> <li>From source</li> </ul>"},{"location":"installation/#install-with-homebrew","title":"Install with Homebrew","text":"<p>You can install tomodo with Homebrew by running the following commands:</p> <pre><code>brew tap yuvalherziger/homebrew-tomodo\nbrew install tomodo\n</code></pre> <p>After installing the tool with <code>brew</code>, you can run it the following way:</p> <pre><code>tomodo --help\n</code></pre>"},{"location":"installation/#upgrade-homebrew-package","title":"Upgrade Homebrew Package","text":"<p>To upgrade the <code>tomodo</code> Homebrew package to the latest version, use the following commands:</p> <pre><code>brew update\nbrew upgrade tomodo\n</code></pre>"},{"location":"installation/#install-with-pip","title":"Install with pip","text":"<p>To install the tool with <code>pip</code>, run the following command:</p> <pre><code>pip install tomodo\n</code></pre>"},{"location":"installation/#install-from-source","title":"Install from Source","text":"<p>If you wish to set up a development environment, you can install tomodo using Python. The recommended way to perform the Python installation is by using the Poetry Python package manager.</p> <p>Requirements:</p> <ul> <li>Python 3.8 or higher</li> <li>Poetry</li> </ul>"},{"location":"installation/#install-with-poetry-package-manager-for-python","title":"Install with Poetry Package Manager for Python","text":"<p>If you have the Poetry Python package manager installed locally, you can install the CLI the following way:</p> <pre><code>git clone https://github.com/yuvalherziger/tomodo.git\ncd tomodo\npoetry shell\npoetry install\n</code></pre> <p>After installing the tool with Poetry, you can run it the following way:</p> <pre><code>tomodo --help\n</code></pre>"},{"location":"installation/#install-from-source-with-pip","title":"Install from source with pip","text":"<p>You can install the dependencies with pip using the following command:</p> <pre><code>git clone https://github.com/yuvalherziger/tomodo.git\ncd tomodo\npip install .\n</code></pre> <p>After installing the dependencies with pip, you can validate the installation by invoking the help page:</p> <pre><code>python tomodo/cmd.py --help\n</code></pre>"},{"location":"programmatic/","title":"Programmatic Usage","text":"<p>You can install tomodo in your Python (&gt;=3.8) projects using <code>pip</code> or any other Python package manager, and use it programmatically.</p>"},{"location":"programmatic/#deploy-a-standalone-instance","title":"Deploy a Standalone Instance","text":"<p>You can deploy a standalone MongoDB instance by using the <code>provision_standalone_instance()</code> function:</p> <pre><code>from tomodo.common.models import Mongod\nfrom tomodo.functional import provision_standalone_instance\n\ndeployment: Mongod = provision_standalone_instance(\n    name=\"curious-zebra\",\n    port=27017,\n    username=\"foo\", password=\"bar\",\n    image_repo=\"mongo\",\n    image_tag=\"latest\",\n    network_name=\"mongo_network\"\n)\n</code></pre>"},{"location":"programmatic/#deploy-a-replica-set","title":"Deploy a Replica Set","text":"<p>You can deploy a standalone MongoDB instance by using the <code>provision_replica_set()</code> function:</p> <pre><code>from tomodo.common.models import ReplicaSet\nfrom tomodo.functional import provision_replica_set\n\ndeployment: ReplicaSet = provision_replica_set(\n    name=\"hungry-fly\",\n    replicas=3,\n    arbiter=False,\n    port=27017,\n    username=\"foo\", password=\"bar\",\n    image_repo=\"mongo\",\n    image_tag=\"latest\",\n    network_name=\"mongo_network\"\n)\n</code></pre>"},{"location":"programmatic/#deploy-a-sharded-cluster","title":"Deploy a Sharded Cluster","text":"<p>You can deploy a sharded cluster by using the <code>provision_sharded_cluster()</code> function:</p> <pre><code>from tomodo.common.models import ShardedCluster\nfrom tomodo.functional import provision_sharded_cluster\n\ndeployment: ShardedCluster = provision_sharded_cluster(\n    name=\"lone-bobcat\",\n    replicas=3,\n    shards=3,\n    mongos=2,\n    config_servers=3,\n    arbiter=False,\n    port=27017,\n    username=\"foo\", password=\"bar\",\n    image_repo=\"mongo\",\n    image_tag=\"latest\",\n    network_name=\"mongo_network\"\n)\n</code></pre>"},{"location":"programmatic/#deploy-a-local-atlas-instance","title":"Deploy a Local Atlas Instance","text":"<p>You can deploy a local MongoDB Atlas instance by using the <code>provision_atlas_instance()</code> function:</p> <pre><code>from tomodo.common.models import AtlasDeployment\nfrom tomodo.functional import provision_atlas_instance\n\ndeployment: AtlasDeployment = provision_atlas_instance(\n    name=\"dazzling-mosquito\",\n    port=27017,\n    version=\"7.0\",\n    username=\"foo\", password=\"bar\",\n    image_repo=\"ghcr.io/yuvalherziger/tomodo\",\n    image_tag=\"main\",\n    network_name=\"mongo_network\"\n)\n</code></pre>"},{"location":"programmatic/#find-a-deployment-by-name","title":"Find a Deployment by Name","text":"<p>Find a deployment by its name using the <code>get_deployment()</code> function:</p> <pre><code>from tomodo.common.errors import DeploymentNotFound\nfrom tomodo.functional import get_deployment\n\ntry:\n    deployment = get_deployment(name=\"elegant-leopard\", include_stopped=True)\nexcept DeploymentNotFound:\n    # Do something with the exception\n    raise\n</code></pre>"},{"location":"programmatic/#list-deployments","title":"List Deployments","text":"<p>Find a deployment by its name using the <code>get_deployment()</code> function, which returns a dictionary of <code>Deployment</code> instances keyed by their names:</p> <pre><code>from typing import Dict\n\nfrom tomodo.common.models import Deployment\nfrom tomodo.functional import list_deployments\n\ndeployments: Dict = list_deployments(include_stopped=True)\nfor name in deployments.keys():\n    deployment: Deployment = deployments[name]\n    print(f\"Deployment {name} is {deployment.last_known_state}\")\n</code></pre>"},{"location":"programmatic/#stop-a-deployment","title":"Stop a Deployment","text":"<p>You can stop a deployment using its <code>stop()</code> method:</p> <pre><code>from tomodo.common.errors import DeploymentNotFound\n\ntry:\n    deployment.stop()\nexcept DeploymentNotFound as exc:\n    # Do something with the exception\n    raise\n</code></pre>"},{"location":"programmatic/#start-a-stopped-deployment","title":"Start a Stopped Deployment","text":"<p>You can restart a stopped a deployment using its <code>start()</code> method:</p> <pre><code>from tomodo.common.errors import DeploymentNotFound\n\ntry:\n    deployment.start()\nexcept DeploymentNotFound as exc:\n    # Do something with the exception\n    raise\n</code></pre>"},{"location":"programmatic/#remove-a-deployment","title":"Remove a Deployment","text":"<p>You permanently remove a deployment using its <code>remove()</code> method:</p> <pre><code>from tomodo.common.errors import DeploymentNotFound\n\ntry:\n    deployment.remove()\nexcept DeploymentNotFound as exc:\n    # Do something with the exception\n    raise\n</code></pre>"},{"location":"cli/describe/","title":"tomodo describe","text":"<p>Describe a single deployment or all deployments</p>"},{"location":"cli/describe/#usage","title":"Usage","text":"<pre><code>tomodo describe --name my-deployment --output json\n</code></pre>"},{"location":"cli/describe/#options-and-flags","title":"Options and Flags","text":"<p><code>--name</code></p> <ul> <li>Description: A specific deployment name;  will describe all deployments if not provided.</li> <li>Type: String</li> <li>Required: No</li> <li> <p>Example:</p> <pre><code>tomodo describe --name my-mongodb-deployment\n</code></pre> </li> </ul> <p><code>--exclude-stopped</code></p> <ul> <li>Description: Exclude stopped deployments</li> <li>Type: Boolean</li> <li>Required: No (default: <code>--no-exclude-stopped</code>)</li> <li> <p>Example:</p> <pre><code>tomodo describe --exclude-stopped\n</code></pre> </li> </ul> <p><code>--output</code></p> <ul> <li>Description: The format of the output printed to stdout.</li> <li>Type: String, Enum: <code>[\"json\", \"table\", \"yaml\"]</code></li> <li>Required: No (default: <code>\"table\"</code>)</li> <li> <p>Example:</p> <pre><code>tomodo describe --output json\n</code></pre> </li> </ul>"},{"location":"cli/list/","title":"tomodo list","text":"<p>List deployments.</p>"},{"location":"cli/list/#options-and-flags","title":"Options and Flags","text":"<p><code>--exclude-stopped</code></p> <ul> <li>Description: Exclude stopped deployments</li> <li>Type: Boolean</li> <li>Required: No (default: <code>--no-exclude-stopped</code>)</li> <li> <p>Example:</p> <pre><code>tomodo list --exclude-stopped\n</code></pre> </li> </ul> <p><code>--output</code></p> <ul> <li>Description: The format of the output printed to stdout.</li> <li>Type: String, Enum: <code>[\"json\", \"table\", \"yaml\"]</code></li> <li>Required: No (default: <code>\"table\"</code>)</li> <li> <p>Example:</p> <pre><code>tomodo list --output json\n</code></pre> </li> </ul>"},{"location":"cli/ops-manager/","title":"tomodo ops-manager","text":"<p>Manage MongoDB Ops Manager deployments</p>"},{"location":"cli/ops-manager/#subcommands","title":"Subcommands","text":""},{"location":"cli/ops-manager/#tomodo-ops-manager-create","title":"tomodo ops-manager create","text":"<p>Provision an Ops Manager instance</p>"},{"location":"cli/ops-manager/#usage","title":"Usage","text":"<pre><code>tomodo ops-manager create\n</code></pre>"},{"location":"cli/ops-manager/#options-and-flags","title":"Options and Flags","text":"<p><code>--name</code></p> <ul> <li>Description: The deployment's name; auto-generated if not provided.</li> <li>Type: String</li> <li>Required: No</li> <li> <p>Example:</p> <pre><code>tomodo ops-manager create --name my-ops-manager\n</code></pre> </li> </ul> <p><code>--port</code></p> <ul> <li>Description: The port that Ops Manager server should expose.</li> <li>Type: Integer</li> <li>Required: No (default: <code>8080</code>)</li> <li> <p>Example:</p> <pre><code>tomodo ops-manager create --port 8080\n</code></pre> </li> </ul> <p><code>--app-db-port</code></p> <ul> <li>Description: The start port that App DB server should expose.</li> <li>Type: Integer</li> <li>Required: No (default: <code>20000</code>)</li> <li> <p>Example:</p> <pre><code>tomodo ops-manager create --app-db-port 27000\n</code></pre> </li> </ul> <p><code>--replicate-app-db</code></p> <ul> <li>Description: Whether or not to use a 3-member replica set for Ops Manager's App DB.</li> <li>Type: Boolean</li> <li>Required: No (default: <code>--no-replicate-app-db</code>)</li> <li> <p>Example:</p> <pre><code>tomodo ops-manager create --replicate-app-db\n</code></pre> </li> </ul>"},{"location":"cli/ops-manager/#tomodo-ops-manager-add-server","title":"tomodo ops-manager add-server","text":"<p>Add one of more servers to Ops Manager. These servers can then be used in Ops Manager to deploy MongoDB instances.</p>"},{"location":"cli/ops-manager/#usage_1","title":"Usage","text":"<pre><code>tomodo ops-manager add-server &lt;OPS_MANAGER_NAME&gt;\n</code></pre>"},{"location":"cli/ops-manager/#options-and-flags_1","title":"Options and Flags","text":"<p><code>--name</code></p> <ul> <li>Description: The nodes' name; auto-generated if not provided.</li> <li>Type: String</li> <li>Required: No</li> <li> <p>Example:</p> <pre><code>tomodo ops-manager add-server my-ops-manager --name mongonode\n</code></pre> </li> </ul> <p><code>--port</code></p> <ul> <li>Description: The port range that the server should expose. If another container is already listening to any of the ports in the range, the action will fail.</li> <li>Type: Integer</li> <li>Required: No (default: <code>27017</code>)</li> <li> <p>Example:</p> <pre><code>tomodo ops-manager add-server my-ops-manager --port 27017\n</code></pre> </li> </ul> <p><code>--count</code></p> <ul> <li>Description: The number of servers to provision.</li> <li>Type: Integer</li> <li>Required: No (default: <code>1</code>)</li> <li> <p>Example:</p> <pre><code>tomodo ops-manager add-server my-ops-manager --count 3\n</code></pre> </li> </ul> <p><code>--project-id</code></p> <ul> <li>Description: The Ops Manager project ID.</li> <li>Type: String</li> <li>Required: Yes</li> <li> <p>Example:</p> <pre><code>tomodo ops-manager add-server my-ops-manager \\\n  --project-id 66d0b5864b2501271f521ad9 \\\n  --api-key 66d0b5984b2501271f521b1c4720cd6cc47e2d838639800ca0dd7e19\n</code></pre> </li> </ul> <p><code>--api-key</code></p> <ul> <li>Description: The Ops Manager Agent API key.</li> <li>Type: String</li> <li>Required: Yes</li> <li> <p>Example:</p> <pre><code>tomodo ops-manager add-server my-ops-manager \\\n  --project-id 66d0b5864b2501271f521ad9 \\\n  --api-key 66d0b5984b2501271f521b1c4720cd6cc47e2d838639800ca0dd7e19\n</code></pre> </li> </ul>"},{"location":"cli/provision/","title":"tomodo provision","text":"<p>Provision a MongoDB deployment.</p> <pre><code>tomodo provision --help\n</code></pre>"},{"location":"cli/provision/#subcommands","title":"Subcommands","text":""},{"location":"cli/provision/#tomodo-provision-standalone","title":"tomodo provision standalone","text":"<p>Provision a standalone MongoDB deployment</p>"},{"location":"cli/provision/#usage","title":"Usage","text":"<pre><code>tomodo provision standalone\n</code></pre>"},{"location":"cli/provision/#options-and-flags","title":"Options and Flags","text":"<p><code>--port</code></p> <ul> <li>Description: The deployment's start port</li> <li>Type: Integer, between 0 and 65535</li> <li>Required: No (default: <code>27017</code>)</li> <li> <p>Example:</p> <pre><code>tomodo provision standalone --port 27111\n</code></pre> </li> </ul> <p><code>--image-repo</code></p> <ul> <li>Description: The MongoDB image name/repo (NOTE: you probably don't want to change it)</li> <li>Type: String</li> <li>Required: No (default: <code>mongo</code>)</li> <li> <p>Example:</p> <pre><code>tomodo provision standalone --image-repo \"mongo\"\n</code></pre> </li> </ul> <p><code>--image-tag</code></p> <ul> <li>Description: The MongoDB image tag, which determines the MongoDB version to install</li> <li>Type: String</li> <li>Required: No (default: <code>latest</code>)</li> <li> <p>Example:</p> <pre><code>tomodo provision standalone --image-tag \"7.0.7\"\n</code></pre> </li> </ul> <p><code>--name</code></p> <ul> <li>Description: The deployment's name; auto-generated if not provided</li> <li>Type: String</li> <li>Required: No (default: generated randomly)</li> <li> <p>Example:</p> <pre><code>tomodo provision standalone --name \"mymongodb\"\n</code></pre> </li> </ul> <p><code>--ephemeral</code></p> <ul> <li>Description: Whether the deployment should be ephemeral and not persist data. </li> <li>Type: Flag</li> <li>Required: No (default: <code>--no-ephemeral</code>)</li> <li> <p>Example:</p> <pre><code>tomodo provision standalone --ephemeral\n</code></pre> </li> </ul> <p><code>--network-name</code></p> <ul> <li>Description: The Docker network to provision the deployment in; will create a new one or use an     existing one with the same name if such network exists</li> <li>Type: String</li> <li>Required: No (default: <code>mongo_network</code>)</li> <li> <p>Example:</p> <pre><code>tomodo provision standalone --network-name \"my-docker-net\"\n</code></pre> </li> </ul> <p><code>--username</code></p> <ul> <li>Description: Admin username; no authentication if not provided</li> <li>Type: String</li> <li>Required: No (default: <code>null</code>)</li> <li> <p>Example:</p> <pre><code>tomodo provision standalone --username \"foo\" --password \"bar\"\n</code></pre> </li> </ul> <p><code>--password</code></p> <ul> <li>Description: Admin password; no authentication if not provided</li> <li>Type: String</li> <li>Required: No (default: <code>null</code>)</li> <li> <p>Example:</p> <pre><code>tomodo provision standalone --username \"foo\" --password \"bar\"\n</code></pre> </li> </ul>"},{"location":"cli/provision/#tomodo-provision-replica-set","title":"tomodo provision replica-set","text":"<p>Provision a MongoDB replica set deployment</p>"},{"location":"cli/provision/#usage_1","title":"Usage","text":"<pre><code>tomodo provision replica-set\n</code></pre>"},{"location":"cli/provision/#options-and-flags_1","title":"Options and Flags","text":"<p><code>--port</code></p> <ul> <li>Description: The deployment's start port</li> <li>Type: Integer, between 0 and 65535</li> <li>Required: No (default: <code>27017</code>)</li> <li> <p>Example:</p> <pre><code>tomodo provision replica-set --port 27111\n</code></pre> </li> </ul> <p><code>--image-repo</code></p> <ul> <li>Description: The MongoDB image name/repo (NOTE: you probably don't want to change it)</li> <li>Type: String</li> <li>Required: No (default: <code>mongo</code>)</li> <li> <p>Example:</p> <pre><code>tomodo provision replica-set --image-repo \"mongo\"\n</code></pre> </li> </ul> <p><code>--image-tag</code></p> <ul> <li>Description: The MongoDB image tag, which determines the MongoDB version to install</li> <li>Type: String</li> <li>Required: No (default: <code>latest</code>)</li> <li> <p>Example:</p> <pre><code>tomodo provision replica-set --image-tag \"7.0.7\"\n</code></pre> </li> </ul> <p><code>--name</code></p> <ul> <li>Description: The deployment's name; auto-generated if not provided</li> <li>Type: String</li> <li>Required: No (default: generated randomly)</li> <li> <p>Example:</p> <pre><code>tomodo provision replica-set --name \"mymongodb\"\n</code></pre> </li> </ul> <p><code>--ephemeral</code></p> <ul> <li>Description: Whether the deployment should be ephemeral and not persist data. </li> <li>Type: Flag</li> <li>Required: No (default: <code>--no-ephemeral</code>)</li> <li> <p>Example:</p> <pre><code>tomodo provision replica-set --ephemeral\n</code></pre> </li> </ul> <p><code>--replicas</code></p> <ul> <li>Description: The number of replica set members to provision</li> <li>Type: Integer, Enum: <code>[1, 3, 5, 7]</code></li> <li>Required: No (default: <code>3</code>)</li> <li> <p>Example:</p> <pre><code>tomodo provision replica-set --replicas 3\n</code></pre> </li> </ul> <p><code>--arbiter</code></p> <ul> <li>Description: Add an arbiter node to the replica set</li> <li>Type: Flag</li> <li>Required: No (default: <code>--no-arbiter</code>)</li> <li> <p>Example:</p> <pre><code>tomodo provision replica-set --arbiter\n</code></pre> </li> </ul> <p><code>--network-name</code></p> <ul> <li>Description: The Docker network to provision the deployment in; will create a new one or use an     existing one with the same name if such network exists</li> <li>Type: String</li> <li>Required: No (default: <code>mongo_network</code>)</li> <li> <p>Example:</p> <pre><code>tomodo provision replica-set --network-name \"my-docker-net\"\n</code></pre> </li> </ul> <p><code>--username</code></p> <ul> <li>Description: Admin username; no authentication if not provided</li> <li>Type: String</li> <li>Required: No (default: <code>null</code>)</li> <li> <p>Example:</p> <pre><code>tomodo provision replica-set --username \"foo\" --password \"bar\"\n</code></pre> </li> </ul> <p><code>--password</code></p> <ul> <li>Description: Admin password; no authentication if not provided</li> <li>Type: String</li> <li>Required: No (default: <code>null</code>)</li> <li> <p>Example:</p> <pre><code>tomodo provision replica-set --username \"foo\" --password \"bar\"\n</code></pre> </li> </ul>"},{"location":"cli/provision/#tomodo-provision-sharded","title":"tomodo provision sharded","text":"<p>Provision a MongoDB sharded cluster</p>"},{"location":"cli/provision/#usage_2","title":"Usage","text":"<pre><code>tomodo provision sharded\n</code></pre>"},{"location":"cli/provision/#options-and-flags_2","title":"Options and Flags","text":"<p><code>--port</code></p> <ul> <li>Description: The deployment's start port</li> <li>Type: Integer, between 0 and 65535</li> <li>Required: No (default: <code>27017</code>)</li> <li> <p>Example:</p> <pre><code>tomodo provision sharded --port 27111\n</code></pre> </li> </ul> <p><code>--image-repo</code></p> <ul> <li>Description: The MongoDB image name/repo (NOTE: you probably don't want to change it)</li> <li>Type: String</li> <li>Required: No (default: <code>mongo</code>)</li> <li> <p>Example:</p> <pre><code>tomodo provision sharded --image-repo \"mongo\"\n</code></pre> </li> </ul> <p><code>--image-tag</code></p> <ul> <li>Description: The MongoDB image tag, which determines the MongoDB version to install</li> <li>Type: String</li> <li>Required: No (default: <code>latest</code>)</li> <li> <p>Example:</p> <pre><code>tomodo provision sharded --image-tag \"7.0.7\"\n</code></pre> </li> </ul> <p><code>--name</code></p> <ul> <li>Description: The deployment's name; auto-generated if not provided</li> <li>Type: String</li> <li>Required: No (default: generated randomly)</li> <li> <p>Example:</p> <pre><code>tomodo provision sharded --name \"mymongodb\"\n</code></pre> </li> </ul> <p><code>--ephemeral</code></p> <ul> <li>Description: Whether the deployment should be ephemeral and not persist data. </li> <li>Type: Flag</li> <li>Required: No (default: <code>--no-ephemeral</code>)</li> <li> <p>Example:</p> <pre><code>tomodo provision sharded --ephemeral\n</code></pre> </li> </ul> <p><code>--replicas</code></p> <ul> <li>Description: The number of replica set members to provision in each shard</li> <li>Type: Integer, Enum: <code>[1, 3, 5, 7]</code></li> <li>Required: No (default: <code>3</code>)</li> <li> <p>Example:</p> <pre><code>tomodo provision sharded --replicas 3\n</code></pre> </li> </ul> <p><code>--shards</code></p> <ul> <li>Description: The number of shards to provision</li> <li>Type: Integer</li> <li>Required: No (default: <code>2</code>)</li> <li> <p>Example:</p> <pre><code>tomodo provision sharded --shards 5\n</code></pre> </li> </ul> <p><code>--mongos</code></p> <ul> <li>Description: The number of mongos routers</li> <li>Type: Integer</li> <li>Required: No (default: <code>1</code>)</li> <li> <p>Example:</p> <pre><code>tomodo provision sharded --mongos 2\n</code></pre> </li> </ul> <p><code>--config-servers</code></p> <ul> <li>Description: The number of config server replica set members</li> <li>Type: Integer, Enum: <code>[1, 3, 5, 7]</code></li> <li>Required: No (default: <code>1</code>)</li> <li> <p>Example:</p> <pre><code>tomodo provision sharded --config-servers 3\n</code></pre> </li> </ul> <p><code>--arbiter</code></p> <ul> <li>Description: Add an arbiter node to each shard</li> <li>Type: Flag</li> <li>Required: No (default: <code>--no-arbiter</code>)</li> <li> <p>Example:</p> <pre><code>tomodo provision sharded --arbiter\n</code></pre> </li> </ul> <p><code>--network-name</code></p> <ul> <li>Description: The Docker network to provision the deployment in; will create a new one or use an     existing one with the same name if such network exists</li> <li>Type: String</li> <li>Required: No (default: <code>mongo_network</code>)</li> <li> <p>Example:</p> <pre><code>tomodo provision sharded --network-name \"my-docker-net\"\n</code></pre> </li> </ul>"},{"location":"cli/provision/#tomodo-provision-atlas","title":"tomodo provision atlas","text":"<p>Provision a local MongoDB Atlas deployment</p>"},{"location":"cli/provision/#usage_3","title":"Usage","text":"<pre><code>tomodo provision atlas\n</code></pre>"},{"location":"cli/provision/#options-and-flags_3","title":"Options and Flags","text":"<p><code>--port</code></p> <ul> <li>Description: The deployment's start port</li> <li>Type: Integer, between 0 and 65535</li> <li>Required: No (default: <code>27017</code>)</li> <li> <p>Example:</p> <pre><code>tomodo provision atlas --port 27111\n</code></pre> </li> </ul> <p><code>--image-tag</code></p> <ul> <li>Description: The MongoDB version to install</li> <li>Type: String</li> <li>Required: No (default: <code>latest</code>)</li> <li> <p>Example:</p> <pre><code>tomodo provision atlas --image-tag \"7\"\n</code></pre> </li> </ul> <p><code>--image-repo</code></p> <ul> <li>Description: The MongoDB Atlas image name/repo (note: you probably don't want to change it)</li> <li>Type: String</li> <li>Required: No (default: <code>mongodb/mongodb-atlas-local</code>)</li> <li> <p>Example:</p> <pre><code>tomodo provision atlas --image-repo \"mongodb/mongodb-atlas-local\"\n</code></pre> </li> </ul> <p><code>--image-tag</code></p> <ul> <li>Description: The MongoDB Atlas image tag (note: you probably don't want to change it) </li> <li>Type: String</li> <li>Required: No (default: <code>main</code>)</li> <li> <p>Example:</p> <pre><code>tomodo provision atlas --image-tag \"main\"\n</code></pre> </li> </ul> <p><code>--name</code></p> <ul> <li>Description: The deployment's name; auto-generated if not provided</li> <li>Type: String</li> <li>Required: No (default: generated randomly)</li> <li> <p>Example:</p> <pre><code>tomodo provision atlas --name \"mymongodb\"\n</code></pre> </li> </ul> <p><code>--network-name</code></p> <ul> <li>Description: The Docker network to provision the deployment in; will create a new one or use an     existing one with the same name if such network exists</li> <li>Type: String</li> <li>Required: No (default: <code>mongo_network</code>)</li> <li> <p>Example:</p> <pre><code>tomodo provision atlas --network-name \"my-docker-net\"\n</code></pre> </li> </ul> <p><code>--username</code></p> <ul> <li>Description: Admin username</li> <li>Type: String</li> <li>Required: No (default: <code>\"admin\"</code>)</li> <li> <p>Example:</p> <pre><code>tomodo provision atlas --username \"foo\" --password \"bar\"\n</code></pre> </li> </ul> <p><code>--password</code></p> <ul> <li>Description: Admin password</li> <li>Type: String</li> <li>Required: No (default: <code>\"admin\"</code>)</li> <li> <p>Example:</p> <pre><code>tomodo provision standalone --username \"foo\" --password \"bar\"\n</code></pre> </li> </ul>"},{"location":"cli/remove/","title":"tomodo remove","text":"<p>Removes a single deployment or all deployments permanently.</p>"},{"location":"cli/remove/#usage","title":"Usage","text":"<pre><code>tomodo remove --name my-deployment\n</code></pre>"},{"location":"cli/remove/#options-and-flags","title":"Options and Flags","text":"<p><code>--name</code></p> <ul> <li>Description: A specific deployment name to remove;  will remove all deployments if not provided.</li> <li>Type: String</li> <li>Required: No</li> <li> <p>Example:</p> <pre><code>tomodo remove --name my-mongodb-deployment\n</code></pre> </li> </ul> <p><code>--auto-confirm</code></p> <ul> <li>Description: Determines whether the confirmation prompt will be presented before execution</li> <li>Type: Boolean</li> <li>Required: No (default: <code>--no-auto-confirm</code>)</li> <li> <p>Example:</p> <pre><code># Remove all deployments\ntomodo remove --auto-confirm\n# Remove a specific deployment by name\ntomodo remove --name my-mongodb-deployment --auto-confirm\n</code></pre> </li> </ul>"},{"location":"cli/start/","title":"tomodo start","text":"<p>Start a stopped deployment.</p>"},{"location":"cli/start/#usage","title":"Usage","text":"<pre><code>tomodo start --name my-deployment\n</code></pre>"},{"location":"cli/start/#options-and-flags","title":"Options and Flags","text":"<p><code>--name</code></p> <ul> <li>Description: A specific deployment name to start.</li> <li>Type: String</li> <li>Required: Yes</li> <li> <p>Example:</p> <pre><code>tomodo stop --name my-mongodb-deployment\n</code></pre> </li> </ul>"},{"location":"cli/stop/","title":"tomodo stop","text":"<p>Stop a single deployment or all deployments</p>"},{"location":"cli/stop/#usage","title":"Usage","text":"<pre><code>tomodo stop --name my-deployment\n</code></pre>"},{"location":"cli/stop/#options-and-flags","title":"Options and Flags","text":"<p><code>--name</code></p> <ul> <li>Description: A specific deployment name to stop;  will stop all deployments if not provided.</li> <li>Type: String</li> <li>Required: No</li> <li> <p>Example:</p> <pre><code>tomodo stop --name my-mongodb-deployment\n</code></pre> </li> </ul> <p><code>--auto-confirm</code></p> <ul> <li>Description: Determines whether the confirmation prompt will be presented before execution</li> <li>Type: Boolean</li> <li>Required: No (default: <code>--no-auto-confirm</code>)</li> <li> <p>Example:</p> <pre><code># Stop all deployments\ntomodo stop --auto-confirm\n# Stop a specific deployment by name\ntomodo stop --name my-mongodb-deployment --auto-confirm\n</code></pre> </li> </ul>"},{"location":"cli/tags/","title":"tomodo tags","text":"<p>Manage image tags.</p> <pre><code>tomodo tags --help\n</code></pre>"},{"location":"cli/tags/#subcommands","title":"Subcommands","text":""},{"location":"cli/tags/#tomodo-tags-list","title":"tomodo tags list","text":"<p>List image tags</p>"},{"location":"cli/tags/#usage","title":"Usage","text":"<pre><code>tomodo tags list\n</code></pre>"},{"location":"cli/tags/#options-and-flags","title":"Options and Flags","text":"<p><code>--version</code></p> <ul> <li>Description: The deployment's start port</li> <li>Type: Filter by version. Must be a valid semantic version (whole or partial).</li> <li>Required: No</li> <li> <p>Example:</p> <pre><code>tomodo tags list --version 7.0.6\n</code></pre> </li> </ul>"}]}